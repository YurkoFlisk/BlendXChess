//============================================================
// ChessEngine
// evaluate.cpp
//============================================================

#include "evaluate.h"

namespace BlendXChess
{

	//============================================================
	// Global variables
	//============================================================

	// Piece weights
	Score ptWeight[PIECETYPE_CNT] = {
		SCORE_ZERO, // Unused
		100, // Pawn
		285, // Knight
		300, // Bishop
		500, // Rook
		900, // Queen
		SCORE_ZERO, // King is a special piece, so material score is not applicable here, thus it is unused
	};
	// Piece-square table of bonuses for each piece(white) on corresponding square
	//      A,  B,  C,  D,  E,  F,  G,  H
	Score psqBonus[PIECETYPE_CNT][SQUARE_CNT] = {
		{},
		{ // Pawn
			0,  0,  0,  0,  0,  0,  0,  0,
		   -4,  0,  0,  3,  3,  0,  0, -4,
		   -4,  1,  1,  5,  5,  0,  1, -4,
		   -4,  1,  6,  9,  9,  3,  1, -4,
		   -4,  1,  3,  9,  9,  2,  1, -4,
		   -3,  2,  3,  9,  9,  3,  2, -3,
		   -2,  4,  5,  9,  9,  5,  4, -2,
			0,  0,  0,  0,  0,  0,  0,  0
		},
		{ // Knight
		  -11, -8, -6, -6, -6, -6, -8,-11,
		   -9, -2,  0,  1,  1,  0, -2, -9,
		   -6,  0,  3,  2,  2,  3,  0, -6,
		   -6,  0,  3,  9,  9,  3,  0, -6,
		   -6,  0,  3, 10, 10,  3,  0, -6,
		   -6,  1,  3,  4,  4,  3,  1, -6,
		   -9, -1,  1,  1,  1,  1, -1, -9,
		  -11, -9, -6, -6, -6, -6, -9,-11
		},
		{ // Bishop
		   -9, -2, -1,  0,  0, -1, -2, -9,
		   -2,  3,  1,  0,  0,  1,  3, -2,
			1,  0,  0,  3,  3,  0,  0,  1,
			0,  0,  4,  4,  4,  4,  0,  0,
			0,  3,  1,  4,  4,  1,  1,  0,
			1,  0,  0,  0,  0,  0,  0,  2,
		   -1,  3,  0,  0,  0,  0,  3, -1,
		   -4, -1,  0,  0,  0,  0, -1, -4
		},
		{ // Rook
		   10, 10, 11, 11, 11, 11, 10, 10,
			5,  5,  5,  5,  5,  5,  5,  5,
			0,  0, -2, -2, -2, -2,  0,  0,
			0,  0, -2, -8, -8, -2,  0,  0,
			0,  0, -2, -8, -8, -2,  0,  0,
			0,  0, -2, -2, -2, -2,  0,  0,
		   15, 15, 15, 15, 15, 15, 15, 15,
			6,  7,  7,  7,  7,  7,  7,  6,
		},
		{ // Queen
		   -8, -7, -7,  1,  1, -5, -5, -8,
		   -7, -4,  0, -2, -2,  0, -4, -7,
		   -5, -1, -2, -1, -1, -2, -1, -5,
		   -2, -3, -2, -3, -3, -2, -3, -2,
		   -2, -3, -2, -3, -3, -2, -3, -2,
		   -3, -2, -1, -2, -2, -1, -2, -3,
		   -5, -2, -2, -2, -2, -2, -2, -5,
		   -7, -4, -3, -3, -3, -3, -4, -7,
		},
		{ // King
			9, 18, 18, 16, 16, 14,  18, 9,
			4,  2,  1,  0,  0,  1,  2,  5,
		   -9, -5, -9, -9, -9, -9, -5, -9,
		  -18,-22,-25,-31,-31,-25,-22,-18,
		  -33,-35,-45,-51,-51,-45,-35,-33,
		  -38,-39,-47,-53,-53,-47,-39,-38,
		  -38,-39,-47,-53,-53,-47,-39,-38,
		  -38,-39,-47,-53,-53,-47,-39,-38,
		},
	};
	// Piece-square table for 2 sides with material of corresponding piece added
	Score psqTable[COLOR_CNT][PIECETYPE_CNT][SQUARE_CNT];

	//============================================================
	// Initialization of global bitboards
	//============================================================
	void initPSQ(void)
	{
		for (PieceType pt = PAWN; pt <= KING; ++pt)
			for (Square sq = Sq::A1; sq <= Sq::H8; ++sq)
			{
				psqTable[WHITE][pt][sq] = ptWeight[pt] + psqBonus[pt][sq];
				psqTable[BLACK][pt][relSquare(sq, BLACK)] = -psqTable[WHITE][pt][sq];
			}
	}

};